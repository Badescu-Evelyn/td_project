/* The following code was generated by JFlex 1.3.5 on 10/31/24, 8:58 AM */

package cup.example;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.Symbol;
import java.lang.*;
import java.io.InputStreamReader;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.5
 * on 10/31/24, 8:58 AM from the specification file
 * <tt>file:/C:/Users/Evy/eclipse-workspace/Proiect_TD/lexer.jflex</tt>
 */
public class Lexer implements sym, java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int CODESEG = 1;
  final public static int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  final private static String yycmap_packed = 
    "\11\13\1\3\1\2\1\0\1\3\1\1\16\13\4\0\1\47\1\0"+
    "\1\7\1\0\1\13\3\0\1\17\1\20\1\15\1\12\1\0\1\4"+
    "\1\6\1\11\12\5\1\21\1\14\1\31\1\22\1\32\2\0\32\13"+
    "\1\0\1\10\2\0\1\13\1\0\1\26\1\13\1\35\1\25\1\37"+
    "\1\33\1\41\1\44\1\36\2\13\1\42\1\23\1\16\1\24\1\43"+
    "\1\13\1\27\1\40\1\30\1\34\1\46\1\45\3\13\4\0\41\13"+
    "\2\0\4\13\4\0\1\13\2\0\1\13\7\0\1\13\4\0\1\13"+
    "\5\0\27\13\1\0\37\13\1\0\u01ca\13\4\0\14\13\16\0\5\13"+
    "\7\0\1\13\1\0\1\13\21\0\160\13\5\13\1\0\2\13\2\0"+
    "\4\13\1\0\1\13\6\0\1\13\1\0\3\13\1\0\1\13\1\0"+
    "\24\13\1\0\123\13\1\0\213\13\1\0\5\13\2\0\246\13\1\0"+
    "\46\13\2\0\1\13\6\0\51\13\6\0\1\13\1\0\55\13\1\0"+
    "\1\13\1\0\2\13\1\0\2\13\1\0\1\13\10\0\33\13\4\0"+
    "\4\13\15\0\6\13\5\0\1\13\4\0\13\13\1\0\1\13\3\0"+
    "\53\13\37\13\4\0\2\13\1\13\143\13\1\0\1\13\10\13\1\0"+
    "\6\13\2\13\2\13\1\0\4\13\2\13\12\13\3\13\2\0\1\13"+
    "\17\0\1\13\1\13\1\13\36\13\33\13\2\0\131\13\13\13\1\13"+
    "\16\0\12\13\41\13\11\13\2\13\4\0\1\13\2\0\1\13\30\13"+
    "\4\13\1\13\11\13\1\13\3\13\1\13\5\13\22\0\31\13\3\13"+
    "\4\0\13\13\5\0\30\13\1\0\6\13\1\0\2\13\6\0\10\13"+
    "\52\13\72\13\66\13\3\13\1\13\22\13\1\13\7\13\12\13\2\13"+
    "\2\0\12\13\1\0\20\13\3\13\1\0\10\13\2\0\2\13\2\0"+
    "\26\13\1\0\7\13\1\0\1\13\3\0\4\13\2\0\1\13\1\13"+
    "\7\13\2\0\2\13\2\0\3\13\1\13\10\0\1\13\4\0\2\13"+
    "\1\0\3\13\2\13\2\0\12\13\4\13\7\0\2\13\1\0\1\13"+
    "\2\0\3\13\1\0\6\13\4\0\2\13\2\0\26\13\1\0\7\13"+
    "\1\0\2\13\1\0\2\13\1\0\2\13\2\0\1\13\1\0\5\13"+
    "\4\0\2\13\2\0\3\13\3\0\1\13\7\0\4\13\1\0\1\13"+
    "\7\0\14\13\3\13\1\13\13\0\3\13\1\0\11\13\1\0\3\13"+
    "\1\0\26\13\1\0\7\13\1\0\2\13\1\0\5\13\2\0\1\13"+
    "\1\13\10\13\1\0\3\13\1\0\3\13\2\0\1\13\17\0\2\13"+
    "\2\13\2\0\12\13\1\0\1\13\7\0\1\13\6\13\1\0\3\13"+
    "\1\0\10\13\2\0\2\13\2\0\26\13\1\0\7\13\1\0\2\13"+
    "\1\0\5\13\2\0\1\13\1\13\7\13\2\0\2\13\2\0\3\13"+
    "\7\0\3\13\4\0\2\13\1\0\3\13\2\13\2\0\12\13\1\0"+
    "\1\13\20\0\1\13\1\13\1\0\6\13\3\0\3\13\1\0\4\13"+
    "\3\0\2\13\1\0\1\13\1\0\2\13\3\0\2\13\3\0\3\13"+
    "\3\0\14\13\4\0\5\13\3\0\3\13\1\0\4\13\2\0\1\13"+
    "\6\0\1\13\16\0\12\13\11\0\1\13\6\0\5\13\10\13\1\0"+
    "\3\13\1\0\27\13\1\0\20\13\2\0\1\13\1\13\7\13\1\0"+
    "\3\13\1\0\4\13\7\0\2\13\1\0\3\13\2\0\1\13\2\0"+
    "\2\13\2\13\2\0\12\13\20\0\1\13\3\13\1\0\10\13\1\0"+
    "\3\13\1\0\27\13\1\0\12\13\1\0\5\13\2\0\1\13\1\13"+
    "\7\13\1\0\3\13\1\0\4\13\7\0\2\13\6\0\2\13\1\0"+
    "\2\13\2\13\2\0\12\13\1\0\2\13\1\13\14\0\4\13\11\13"+
    "\1\0\3\13\1\0\51\13\2\13\1\13\7\13\1\0\3\13\1\0"+
    "\4\13\1\13\5\0\3\13\1\13\7\0\3\13\2\13\2\0\12\13"+
    "\12\0\6\13\1\0\3\13\1\0\22\13\3\0\30\13\1\0\11\13"+
    "\1\0\1\13\2\0\7\13\3\0\1\13\4\0\6\13\1\0\1\13"+
    "\1\0\10\13\6\0\12\13\2\0\2\13\15\0\60\13\1\13\2\13"+
    "\7\13\4\0\10\13\10\13\1\0\12\13\47\0\2\13\1\0\1\13"+
    "\1\0\5\13\1\0\30\13\1\0\1\13\1\0\12\13\1\13\2\13"+
    "\11\13\1\13\2\0\5\13\1\0\1\13\1\0\7\13\1\0\12\13"+
    "\2\0\4\13\40\0\1\13\27\0\2\13\6\0\12\13\13\0\1\13"+
    "\1\0\1\13\1\0\1\13\4\0\2\13\10\13\1\0\44\13\4\0"+
    "\24\13\1\0\2\13\5\13\13\13\1\0\44\13\11\0\1\13\71\0"+
    "\53\13\24\13\1\13\12\13\6\0\6\13\4\13\4\13\3\13\1\13"+
    "\3\13\2\13\7\13\3\13\4\13\15\13\14\13\1\13\17\13\2\0"+
    "\46\13\1\0\1\13\5\0\1\13\2\0\53\13\1\0\u014d\13\1\0"+
    "\4\13\2\0\7\13\1\0\1\13\1\0\4\13\2\0\51\13\1\0"+
    "\4\13\2\0\41\13\1\0\4\13\2\0\7\13\1\0\1\13\1\0"+
    "\4\13\2\0\17\13\1\0\71\13\1\0\4\13\2\0\103\13\2\0"+
    "\3\13\40\0\20\13\20\0\126\13\2\0\6\13\3\0\u026c\13\2\0"+
    "\21\13\1\0\32\13\5\0\113\13\3\0\13\13\7\0\22\13\4\13"+
    "\11\0\23\13\3\13\13\0\22\13\2\13\14\0\15\13\1\0\3\13"+
    "\1\0\2\13\14\0\64\13\40\13\3\0\1\13\3\0\2\13\1\13"+
    "\2\0\12\13\41\0\17\13\6\0\131\13\7\0\5\13\2\13\42\13"+
    "\1\13\1\13\5\0\106\13\12\0\37\13\1\0\14\13\4\0\14\13"+
    "\12\0\12\13\36\13\2\0\5\13\13\0\54\13\4\0\32\13\6\0"+
    "\12\13\46\0\27\13\5\13\4\0\65\13\12\13\1\0\35\13\2\0"+
    "\13\13\6\0\12\13\15\0\1\13\10\0\16\13\1\0\20\13\61\0"+
    "\5\13\57\13\21\13\10\13\3\0\12\13\21\0\11\13\14\0\3\13"+
    "\36\13\15\13\2\13\12\13\54\13\16\13\14\0\44\13\24\13\10\0"+
    "\12\13\3\0\3\13\12\13\44\13\2\0\11\13\7\0\53\13\2\0"+
    "\3\13\20\0\3\13\1\0\25\13\4\13\1\13\6\13\1\13\2\13"+
    "\3\13\1\13\5\0\300\13\100\13\u0116\13\2\0\6\13\2\0\46\13"+
    "\2\0\6\13\2\0\10\13\1\0\1\13\1\0\1\13\1\0\1\13"+
    "\1\0\37\13\2\0\65\13\1\0\7\13\1\0\1\13\3\0\3\13"+
    "\1\0\7\13\3\0\4\13\2\0\6\13\4\0\15\13\5\0\3\13"+
    "\1\0\7\13\16\0\5\13\32\0\5\13\20\0\2\13\23\0\1\13"+
    "\13\0\5\13\1\0\12\13\1\0\1\13\15\0\1\13\20\0\15\13"+
    "\3\0\41\13\17\0\15\13\4\0\1\13\3\0\14\13\21\0\1\13"+
    "\4\0\1\13\2\0\12\13\1\0\1\13\3\0\5\13\6\0\1\13"+
    "\1\0\1\13\1\0\1\13\1\0\4\13\1\0\13\13\2\0\4\13"+
    "\5\0\5\13\4\0\1\13\21\0\51\13\u0a77\0\345\13\6\0\4\13"+
    "\3\13\2\13\14\0\46\13\1\0\1\13\5\0\1\13\2\0\70\13"+
    "\7\0\1\13\17\0\1\13\27\13\11\0\7\13\1\0\7\13\1\0"+
    "\7\13\1\0\7\13\1\0\7\13\1\0\7\13\1\0\7\13\1\0"+
    "\7\13\1\0\40\13\57\0\1\13\u01d5\0\3\13\31\0\11\13\6\13"+
    "\1\0\5\13\2\0\5\13\4\0\126\13\2\0\2\13\2\0\3\13"+
    "\1\0\132\13\1\0\4\13\5\0\53\13\1\0\136\13\21\0\40\13"+
    "\60\0\20\13\u0200\0\u19c0\13\100\0\u568d\13\103\0\56\13\2\0\u010d\13"+
    "\3\0\20\13\12\13\2\13\24\0\57\13\1\13\4\0\12\13\1\0"+
    "\37\13\2\13\120\13\2\13\45\0\11\13\2\0\147\13\2\0\100\13"+
    "\5\0\2\13\1\0\1\13\1\0\5\13\30\0\20\13\1\13\3\13"+
    "\1\13\4\13\1\13\27\13\5\13\4\0\1\13\13\0\1\13\7\0"+
    "\64\13\14\0\2\13\62\13\22\13\12\0\12\13\6\0\22\13\6\13"+
    "\3\0\1\13\1\0\2\13\13\13\34\13\10\13\2\0\27\13\15\13"+
    "\14\0\35\13\3\0\4\13\57\13\16\13\16\0\1\13\12\13\6\0"+
    "\5\13\1\13\12\13\12\13\5\13\1\0\51\13\16\13\11\0\3\13"+
    "\1\13\10\13\2\13\2\0\12\13\6\0\27\13\3\0\1\13\3\13"+
    "\62\13\1\13\1\13\3\13\2\13\2\13\5\13\2\13\1\13\1\13"+
    "\1\13\30\0\3\13\2\0\13\13\5\13\2\0\3\13\2\13\12\0"+
    "\6\13\2\0\6\13\2\0\6\13\11\0\7\13\1\0\7\13\1\0"+
    "\53\13\1\0\16\13\6\0\163\13\10\13\1\0\2\13\2\0\12\13"+
    "\6\0\u2ba4\13\14\0\27\13\4\0\61\13\u2104\0\u016e\13\2\0\152\13"+
    "\46\0\7\13\14\0\5\13\5\0\1\13\1\13\12\13\1\0\15\13"+
    "\1\0\5\13\1\0\1\13\1\0\2\13\1\0\2\13\1\0\154\13"+
    "\41\0\u016b\13\22\0\100\13\2\0\66\13\50\0\15\13\3\0\20\13"+
    "\20\0\20\13\3\0\2\13\30\0\3\13\31\0\1\13\6\0\5\13"+
    "\1\0\207\13\2\0\1\13\4\0\1\13\13\0\12\13\7\0\32\13"+
    "\4\0\1\13\1\0\32\13\13\0\131\13\3\0\6\13\2\0\6\13"+
    "\2\0\6\13\2\0\3\13\3\0\2\13\3\0\2\13\22\0\3\13"+
    "\4\0";

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = yy_unpack_cmap(yycmap_packed);

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    40,    80,   120,    80,   160,   200,   240,   280,    80, 
       80,   320,    80,   360,   400,    80,    80,   440,    80,   480, 
      520,   560,   600,   640,   680,   720,   760,   800,   840,   880, 
      920,   960,  1000,  1040,   160,   240,   240,   280,    80,  1080, 
       80,  1120,    80,  1160,   320,   320,  1200,  1240,  1280,   320, 
     1320,    80,    80,    80,  1360,  1400,  1440,  1480,   320,  1520, 
     1560,  1600,  1640,  1680,  1720,  1760,   320,   320,  1800,  1840, 
      320,  1880,  1920,  1960,   320,  2000,  2040,  2080,  2120,  2160, 
     2200,  2240,  2280,  2320,  2360,   320,   320,   320,   320,  2400, 
      320,  2440,  2480,  2520,  2560,  2600,  2640,  2680,   320,  2720, 
     2760,  2800,  2840,  2880,  2920,  2960,   320,  3000,   320,  3040, 
     3080,   320,  3120,  3160,  3200,  3240,  3280,   320,   320,   320, 
     3320,  3360,   320,  3400,  3440,   320,  3480,  3520,  3560,  3600, 
      320,  3640,  3680,  3720,  3760,   320,   320,  3800,  3840,  3880, 
       80,  3920,  3960,    80,  4000,   320,   320
  };

  /** 
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 = 
    "\1\3\1\4\2\5\1\6\1\7\1\10\1\11\1\3"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\14\1\35\1\36\1\37\1\40"+
    "\2\14\1\41\1\14\1\42\1\14\1\5\50\3\52\0"+
    "\1\5\52\0\1\43\1\44\46\0\1\7\1\44\4\0"+
    "\1\14\2\0\1\14\4\0\6\14\2\0\14\14\6\0"+
    "\1\45\42\0\2\46\1\0\4\46\1\47\1\50\37\46"+
    "\5\0\1\14\5\0\1\14\2\0\1\14\4\0\6\14"+
    "\2\0\14\14\16\0\1\51\37\0\1\14\5\0\1\14"+
    "\2\0\1\14\4\0\1\14\1\52\4\14\2\0\14\14"+
    "\23\0\1\53\32\0\1\14\5\0\1\14\2\0\1\14"+
    "\4\0\1\14\1\54\4\14\2\0\14\14\6\0\1\14"+
    "\5\0\1\14\2\0\1\14\4\0\4\14\1\55\1\14"+
    "\2\0\14\14\6\0\1\14\5\0\1\14\2\0\1\14"+
    "\4\0\1\14\1\56\2\14\1\57\1\14\2\0\14\14"+
    "\6\0\1\14\5\0\1\14\2\0\1\60\4\0\6\14"+
    "\2\0\14\14\6\0\1\14\5\0\1\14\2\0\1\14"+
    "\4\0\6\14\2\0\4\14\1\61\7\14\6\0\1\14"+
    "\5\0\1\14\2\0\1\14\4\0\1\14\1\62\4\14"+
    "\2\0\11\14\1\63\2\14\23\0\1\64\7\0\1\65"+
    "\37\0\1\66\32\0\1\14\5\0\1\14\2\0\1\14"+
    "\4\0\1\14\1\67\4\14\2\0\1\14\1\70\12\14"+
    "\6\0\1\14\5\0\1\14\2\0\1\14\4\0\6\14"+
    "\2\0\7\14\1\71\4\14\6\0\1\14\5\0\1\14"+
    "\2\0\1\72\4\0\6\14\2\0\1\73\13\14\6\0"+
    "\1\14\5\0\1\14\2\0\1\74\4\0\6\14\2\0"+
    "\7\14\1\75\4\14\6\0\1\14\5\0\1\14\2\0"+
    "\1\14\4\0\5\14\1\76\2\0\4\14\1\77\7\14"+
    "\6\0\1\14\5\0\1\14\2\0\1\14\4\0\4\14"+
    "\1\100\1\14\2\0\14\14\6\0\1\14\5\0\1\14"+
    "\2\0\1\14\4\0\4\14\1\101\1\14\2\0\11\14"+
    "\1\102\2\14\1\0\2\46\1\0\45\46\5\0\1\14"+
    "\5\0\1\14\2\0\1\14\4\0\5\14\1\103\2\0"+
    "\14\14\6\0\1\14\5\0\1\14\2\0\1\14\4\0"+
    "\2\14\1\104\3\14\2\0\13\14\1\105\6\0\1\14"+
    "\5\0\1\14\2\0\1\14\4\0\3\14\1\106\2\14"+
    "\2\0\14\14\6\0\1\14\5\0\1\14\2\0\1\14"+
    "\4\0\2\14\1\107\3\14\2\0\14\14\6\0\1\14"+
    "\5\0\1\14\2\0\1\14\4\0\3\14\1\110\1\14"+
    "\1\111\2\0\14\14\6\0\1\14\5\0\1\14\2\0"+
    "\1\14\4\0\6\14\2\0\4\14\1\112\7\14\6\0"+
    "\1\14\5\0\1\14\2\0\1\14\4\0\4\14\1\113"+
    "\1\14\2\0\14\14\6\0\1\14\5\0\1\14\2\0"+
    "\1\114\4\0\6\14\2\0\14\14\6\0\1\14\5\0"+
    "\1\14\2\0\1\14\4\0\6\14\2\0\4\14\1\115"+
    "\7\14\6\0\1\14\5\0\1\14\2\0\1\14\4\0"+
    "\5\14\1\116\2\0\14\14\6\0\1\14\5\0\1\14"+
    "\2\0\1\14\4\0\2\14\1\117\3\14\2\0\14\14"+
    "\6\0\1\14\5\0\1\14\2\0\1\14\4\0\6\14"+
    "\2\0\5\14\1\120\6\14\6\0\1\14\5\0\1\14"+
    "\2\0\1\14\4\0\4\14\1\121\1\14\2\0\14\14"+
    "\6\0\1\14\5\0\1\14\2\0\1\14\4\0\5\14"+
    "\1\122\2\0\14\14\6\0\1\14\5\0\1\14\2\0"+
    "\1\14\4\0\1\14\1\123\4\14\2\0\14\14\6\0"+
    "\1\14\5\0\1\14\2\0\1\14\4\0\6\14\2\0"+
    "\3\14\1\124\10\14\6\0\1\14\5\0\1\14\2\0"+
    "\1\14\4\0\6\14\2\0\3\14\1\125\10\14\6\0"+
    "\1\14\5\0\1\14\2\0\1\14\4\0\6\14\2\0"+
    "\4\14\1\126\7\14\6\0\1\14\5\0\1\14\2\0"+
    "\1\14\4\0\6\14\2\0\12\14\1\127\1\14\6\0"+
    "\1\14\5\0\1\14\2\0\1\14\4\0\2\14\1\130"+
    "\3\14\2\0\7\14\1\131\4\14\6\0\1\14\5\0"+
    "\1\14\2\0\1\14\4\0\6\14\2\0\1\14\1\132"+
    "\12\14\6\0\1\14\5\0\1\14\2\0\1\133\4\0"+
    "\6\14\2\0\14\14\6\0\1\14\5\0\1\14\2\0"+
    "\1\14\4\0\6\14\2\0\2\14\1\134\11\14\6\0"+
    "\1\14\5\0\1\14\2\0\1\14\4\0\3\14\1\135"+
    "\2\14\2\0\14\14\6\0\1\14\5\0\1\14\2\0"+
    "\1\14\4\0\6\14\2\0\4\14\1\136\7\14\6\0"+
    "\1\14\5\0\1\14\2\0\1\14\4\0\2\14\1\137"+
    "\3\14\2\0\1\140\2\14\1\141\4\14\1\142\3\14"+
    "\6\0\1\14\5\0\1\14\2\0\1\14\4\0\6\14"+
    "\2\0\4\14\1\143\7\14\6\0\1\14\5\0\1\14"+
    "\2\0\1\14\4\0\6\14\2\0\3\14\1\144\10\14"+
    "\6\0\1\14\5\0\1\14\2\0\1\14\4\0\6\14"+
    "\2\0\14\14\1\145\5\0\1\14\5\0\1\14\2\0"+
    "\1\14\4\0\6\14\2\0\6\14\1\146\5\14\6\0"+
    "\1\14\5\0\1\14\2\0\1\14\4\0\5\14\1\147"+
    "\2\0\14\14\6\0\1\14\5\0\1\14\2\0\1\14"+
    "\4\0\6\14\2\0\7\14\1\150\4\14\6\0\1\14"+
    "\5\0\1\14\2\0\1\14\4\0\4\14\1\151\1\14"+
    "\2\0\14\14\6\0\1\14\5\0\1\14\2\0\1\14"+
    "\4\0\5\14\1\152\2\0\14\14\6\0\1\14\5\0"+
    "\1\14\2\0\1\14\4\0\4\14\1\153\1\14\2\0"+
    "\14\14\6\0\1\14\5\0\1\14\2\0\1\14\4\0"+
    "\6\14\2\0\6\14\1\154\5\14\6\0\1\14\5\0"+
    "\1\14\2\0\1\14\4\0\1\14\1\155\4\14\2\0"+
    "\14\14\6\0\1\14\5\0\1\14\2\0\1\14\4\0"+
    "\1\14\1\156\4\14\2\0\1\14\1\157\12\14\6\0"+
    "\1\14\5\0\1\14\2\0\1\14\4\0\6\14\2\0"+
    "\1\160\13\14\6\0\1\14\5\0\1\14\2\0\1\14"+
    "\4\0\4\14\1\161\1\14\2\0\14\14\6\0\1\14"+
    "\5\0\1\14\2\0\1\162\4\0\6\14\2\0\14\14"+
    "\36\0\1\163\4\0\1\164\12\0\1\14\5\0\1\14"+
    "\2\0\1\14\4\0\4\14\1\165\1\14\2\0\14\14"+
    "\6\0\1\14\5\0\1\14\2\0\1\14\4\0\6\14"+
    "\2\0\4\14\1\166\7\14\6\0\1\14\5\0\1\14"+
    "\2\0\1\14\4\0\6\14\2\0\4\14\1\167\7\14"+
    "\6\0\1\14\5\0\1\14\2\0\1\170\4\0\6\14"+
    "\2\0\14\14\6\0\1\14\5\0\1\14\2\0\1\14"+
    "\4\0\6\14\2\0\3\14\1\171\10\14\6\0\1\14"+
    "\5\0\1\14\2\0\1\14\4\0\6\14\2\0\4\14"+
    "\1\172\7\14\6\0\1\14\5\0\1\14\2\0\1\14"+
    "\4\0\4\14\1\173\1\14\2\0\14\14\6\0\1\14"+
    "\5\0\1\14\2\0\1\174\4\0\6\14\2\0\14\14"+
    "\6\0\1\14\5\0\1\14\2\0\1\14\4\0\1\14"+
    "\1\175\4\14\2\0\14\14\6\0\1\14\5\0\1\14"+
    "\2\0\1\14\4\0\6\14\2\0\6\14\1\176\5\14"+
    "\25\0\1\177\61\0\1\200\16\0\1\14\5\0\1\14"+
    "\2\0\1\14\4\0\3\14\1\201\2\14\2\0\14\14"+
    "\6\0\1\14\5\0\1\14\2\0\1\14\4\0\1\14"+
    "\1\202\4\14\2\0\14\14\6\0\1\14\5\0\1\14"+
    "\2\0\1\14\4\0\4\14\1\203\1\14\2\0\14\14"+
    "\6\0\1\14\5\0\1\14\2\0\1\14\4\0\6\14"+
    "\2\0\2\14\1\204\11\14\6\0\1\14\5\0\1\14"+
    "\2\0\1\14\4\0\6\14\2\0\6\14\1\205\5\14"+
    "\43\0\1\206\23\0\1\207\36\0\1\14\5\0\1\14"+
    "\2\0\1\14\4\0\1\210\5\14\2\0\14\14\6\0"+
    "\1\14\5\0\1\14\2\0\1\211\4\0\6\14\2\0"+
    "\14\14\6\0\1\14\5\0\1\14\2\0\1\14\4\0"+
    "\5\14\1\212\2\0\14\14\6\0\1\14\5\0\1\14"+
    "\2\0\1\14\4\0\4\14\1\213\1\14\2\0\14\14"+
    "\25\0\1\214\62\0\1\215\15\0\1\14\5\0\1\14"+
    "\2\0\1\14\4\0\6\14\2\0\3\14\1\216\10\14"+
    "\6\0\1\14\5\0\1\14\2\0\1\14\4\0\3\14"+
    "\1\217\2\14\2\0\14\14\30\0\1\220\25\0\1\14"+
    "\5\0\1\14\2\0\1\14\4\0\1\14\1\221\4\14"+
    "\2\0\14\14\6\0\1\14\5\0\1\14\2\0\1\14"+
    "\4\0\1\222\5\14\2\0\14\14\6\0\1\14\5\0"+
    "\1\14\2\0\1\223\4\0\6\14\2\0\14\14\1\0";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     1,  0,  9,  1,  9,  1,  1,  1,  1,  9,  9,  1,  9,  1,  1,  9, 
     9,  1,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  0,  1,  0,  9,  0,  9,  1,  9,  1,  1,  1,  1,  1, 
     1,  1,  1,  9,  9,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  0, 
     1,  1,  1,  1,  1,  0,  0,  1,  1,  1,  1,  0,  9,  1,  1,  9, 
     1,  1,  1
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean yy_eof_done;

  /* user code: */
	

    public Lexer(ComplexSymbolFactory sf, java.io.InputStream is){
		this(is);
        symbolFactory = sf;
    }
	public Lexer(ComplexSymbolFactory sf, java.io.Reader reader){
		this(reader);
        symbolFactory = sf;
    }
    
    private StringBuffer sb;
    private ComplexSymbolFactory symbolFactory;
    private int csline,cscolumn;

    public Symbol symbol(String name, int code){
		return symbolFactory.newSymbol(name, code,
						new Location(yyline+1,yycolumn+1, yychar), // -yylength()
						new Location(yyline+1,yycolumn+yylength(), yychar+yylength())
				);
    }
    public Symbol symbol(String name, int code, String lexem){
	return symbolFactory.newSymbol(name, code, 
						new Location(yyline+1, yycolumn +1, yychar), 
						new Location(yyline+1,yycolumn+yylength(), yychar+yylength()), lexem);
    }
    
    protected void emit_warning(String message){
    	System.out.println("scanner warning: " + message + " at : 2 "+ 
    			(yyline+1) + " " + (yycolumn+1) + " " + yychar);
    }
    
    protected void emit_error(String message){
    	System.out.println("scanner error: " + message + " at : 2" + 
    			(yyline+1) + " " + (yycolumn+1) + " " + yychar);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[4040];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2262) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;  
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void yy_do_eof() throws java.io.IOException {
    if (!yy_eof_done) {
      yy_eof_done = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      yychar+= yy_markedPos_l-yy_startRead;

      boolean yy_r = false;
      for (yy_currentPos_l = yy_startRead; yy_currentPos_l < yy_markedPos_l;
                                                             yy_currentPos_l++) {
        switch (yy_buffer_l[yy_currentPos_l]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          yy_r = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          yy_r = true;
          break;
        case '\n':
          if (yy_r)
            yy_r = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          yy_r = false;
          yycolumn++;
        }
      }

      if (yy_r) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean yy_peek;
        if (yy_markedPos_l < yy_endRead_l)
          yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        else if (yy_atEOF)
          yy_peek = false;
        else {
          boolean eof = yy_refill();
          yy_markedPos_l = yy_markedPos;
          yy_buffer_l = yy_buffer;
          if (eof) 
            yy_peek = false;
          else 
            yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        }
        if (yy_peek) yyline--;
      }
      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 1) == 1 ) {
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action) {

        case 26: 
          {  return symbolFactory.newSymbol("GT", GT);  }
        case 148: break;
        case 25: 
          {  return symbolFactory.newSymbol("LT", LT);  }
        case 149: break;
        case 18: 
          {  return symbolFactory.newSymbol("EQ", EQ);  }
        case 150: break;
        case 44: 
          {  return symbolFactory.newSymbol("OR", OR);  }
        case 151: break;
        case 45: 
          {  return symbolFactory.newSymbol("DO", DO);  }
        case 152: break;
        case 49: 
          {  return symbolFactory.newSymbol("TO", TO);  }
        case 153: break;
        case 51: 
          {  return symbolFactory.newSymbol("LE", LE);  }
        case 154: break;
        case 53: 
          {  return symbolFactory.newSymbol("GE", GE);  }
        case 155: break;
        case 58: 
          {  return symbolFactory.newSymbol("IF", IF);  }
        case 156: break;
        case 36: 
          {  return symbolFactory.newSymbol("REALVAL", REALVAL, Float.parseFloat(yytext()));  }
        case 157: break;
        case 6: 
        case 34: 
          {  return symbolFactory.newSymbol("NUMBER", NUMBER, Integer.parseInt(yytext()));  }
        case 158: break;
        case 3: 
        case 4: 
          {                                }
        case 159: break;
        case 135: 
          {  return symbolFactory.newSymbol("PROGRAM", PROGRAM);  }
        case 160: break;
        case 130: 
          {  return symbolFactory.newSymbol("INTEGER", INTEGER);  }
        case 161: break;
        case 118: 
          {  return symbolFactory.newSymbol("WHILE", WHILE);  }
        case 162: break;
        case 117: 
          {  return symbolFactory.newSymbol("WRITE", WRITE);  }
        case 163: break;
        case 111: 
          {  return symbolFactory.newSymbol("ENDIF", ENDIF);  }
        case 164: break;
        case 108: 
          {  return symbolFactory.newSymbol("ENDDO", ENDDO);  }
        case 165: break;
        case 106: 
          {  return symbolFactory.newSymbol("CLEAR", CLEAR);  }
        case 166: break;
        case 13: 
          {  return symbolFactory.newSymbol("TIMES", TIMES);  }
        case 167: break;
        case 5: 
          {  return symbolFactory.newSymbol("MINUS", MINUS);  }
        case 168: break;
        case 40: 
          {  return symbolFactory.newSymbol("POWER", POWER);  }
        case 169: break;
        case 2: 
        case 7: 
        case 8: 
        case 17: 
          {  emit_warning("Unrecognized character '" +yytext()+"' -- ignored");  }
        case 170: break;
        case 145: 
          {  return symbolFactory.newSymbol("ENDPROGRAM", ENDPROGRAM);  }
        case 171: break;
        case 42: 
          {  return symbolFactory.newSymbol("ASSIGNMENT", ASSIGNMENT);  }
        case 172: break;
        case 66: 
          {  return symbolFactory.newSymbol("NOT", NOT);  }
        case 173: break;
        case 67: 
          {  return symbolFactory.newSymbol("MOD", MOD);  }
        case 174: break;
        case 70: 
          {  return symbolFactory.newSymbol("AND", AND);  }
        case 175: break;
        case 74: 
          {  return symbolFactory.newSymbol("FOR", FOR);  }
        case 176: break;
        case 140: 
          {  return symbolFactory.newSymbol("SET_LINE", SET_LINE);  }
        case 177: break;
        case 136: 
          {  return symbolFactory.newSymbol("FUNCTION", FUNCTION);  }
        case 178: break;
        case 52: 
          {  return symbolFactory.newSymbol("NOTEQUAL", NOTEQUAL);  }
        case 179: break;
        case 146: 
          {  return symbolFactory.newSymbol("ENDFUNCTION", ENDFUNCTION);  }
        case 180: break;
        case 98: 
          {  return symbolFactory.newSymbol("ELSE", ELSE);  }
        case 181: break;
        case 10: 
          {  return symbolFactory.newSymbol("PLUS", PLUS);  }
        case 182: break;
        case 12: 
          {  return symbolFactory.newSymbol("SEMI", SEMI);  }
        case 183: break;
        case 85: 
          {  return symbolFactory.newSymbol("MOVE", MOVE);  }
        case 184: break;
        case 86: 
          {  return symbolFactory.newSymbol("DRAW", DRAW);  }
        case 185: break;
        case 87: 
          {  return symbolFactory.newSymbol("READ", READ);  }
        case 186: break;
        case 88: 
          {  return symbolFactory.newSymbol("REAL", REAL);  }
        case 187: break;
        case 90: 
          {  return symbolFactory.newSymbol("THEN", THEN);  }
        case 188: break;
        case 143: 
          {  return symbolFactory.newSymbol("SET_COLOR", SET_COLOR);  }
        case 189: break;
        case 125: 
          {  return symbolFactory.newSymbol("STRING", STRING);  }
        case 190: break;
        case 122: 
          {  return symbolFactory.newSymbol("ENDFOR", ENDFOR);  }
        case 191: break;
        case 119: 
          {  return symbolFactory.newSymbol("RETURN", RETURN);  }
        case 192: break;
        case 16: 
          {  return symbolFactory.newSymbol("RPAREN", RPAREN);  }
        case 193: break;
        case 15: 
          {  return symbolFactory.newSymbol("LPAREN", LPAREN);  }
        case 194: break;
        case 14: 
          {  return symbolFactory.newSymbol("UMINUS", UMINUS);  }
        case 195: break;
        case 9: 
          {  return symbolFactory.newSymbol("DIVIDE", DIVIDE);  }
        case 196: break;
        case 38: 
          {  return symbolFactory.newSymbol("LITERAL", LITERAL, String.valueOf(yytext()));  }
        case 197: break;
        case 0: 
        case 11: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
        case 24: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
        case 32: 
        case 33: 
        case 41: 
        case 43: 
        case 46: 
        case 47: 
        case 48: 
        case 50: 
        case 54: 
        case 55: 
        case 56: 
        case 57: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
        case 64: 
        case 65: 
        case 68: 
        case 69: 
        case 71: 
        case 72: 
        case 73: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 89: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
        case 96: 
        case 97: 
        case 99: 
        case 101: 
        case 102: 
        case 103: 
        case 104: 
        case 105: 
        case 107: 
        case 109: 
        case 110: 
        case 112: 
        case 113: 
        case 116: 
        case 120: 
        case 121: 
        case 123: 
        case 124: 
        case 128: 
        case 129: 
        case 131: 
        case 132: 
        case 137: 
        case 138: 
        case 141: 
        case 142: 
        case 144: 
          {  return symbolFactory.newSymbol("IDENTIFIER", IDENTIFIER, yytext());  }
        case 198: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            yy_do_eof();
              {     return symbolFactory.newSymbol("EOF",sym.EOF);
 }
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }


}
